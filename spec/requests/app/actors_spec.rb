require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/actors', type: :request do
  describe 'GET /index' do
    it 'renders a successful response' do
      FactoryBot.create_list :user, 2
      get federails.client_actors_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    context 'with an existing actor' do
      let(:actor) { FactoryBot.create :local_actor }

      it 'renders a successful response' do
        get federails.client_actor_url(actor)
        expect(response).to be_successful
      end

      context 'when actor has followers and followings' do
        before do
          # Pending request
          FactoryBot.create :following, actor: actor, target_actor: FactoryBot.create(:local_actor)
          # Accepted requests
          [
            FactoryBot.create(:following, actor: actor),
            FactoryBot.create(:following, target_actor: actor, actor: FactoryBot.create(:local_actor)),
          ].map(&:accept!)
        end

        it 'renders a successful response' do
          get federails.client_actor_url(actor)
          expect(response).to be_successful
        end
      end
    end

    context 'without a valid actor' do
      it 'renders an error page' do
        expect do
          get federails.client_actor_url(0)
        end.to raise_error ActiveRecord::RecordNotFound
      end
    end
  end

  describe 'GET /lookup' do
    it 'renders a successful response' do
      user = FactoryBot.create :user
      get federails.lookup_client_actors_url account: user.id
      expect(response).to be_successful
    end
  end
end
